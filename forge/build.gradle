plugins {
  id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
  platformSetupLoomIde()
  forge()
}

loom {
  accessWidenerPath = project(":common").loom.accessWidenerPath

  forge {
    convertAccessWideners = true
    extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentForge.extendsFrom common
}

dependencies {
  forge("net.minecraftforge:forge:${minecraft_version}-${forge_version}")
  common(project(path: ":common", configuration: "namedElements")) { transitive = false }
  shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

  compileOnly("io.github.llamalad7:mixinextras-common:${mixin_extras_version}")
  annotationProcessor(implementation(include("io.github.llamalad7:mixinextras-forge:${mixin_extras_version}")))

  forgeRuntimeLibrary(implementation(shadowCommon("javazoom:jlayer:${jlayer_version}")))

  // Create and its dependencies
  modImplementation("com.simibubi.create:create-${minecraft_version}:${create_forge_version}:slim") { transitive = false }
  modImplementation("com.tterrag.registrate:Registrate:${registrate_forge_version}")
  modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_forge_version}")
  modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_forge_version}")
  modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_forge_version}")

  // Development QOL
  modLocalRuntime("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false }

  // Compat
  //modCompileOnly("com.railwayteam.railways:Steam_Rails-forge-${minecraft_version}:${railways_forge_version}") { transitive = false }
  //modLocalRuntime("com.railwayteam.railways:Steam_Rails-forge-${minecraft_version}:${railways_forge_version}") { transitive = false }
}

processResources {
  Map<String, String> properties = Map.of(
    "mod_id", mod_id,
    "version", mod_version,
    "forge_version", forge_version.split("\\.")[0],
    "minecraft_version", minecraft_version,
    "create_version", create_forge_version.split("-")[0],
  )
  properties.forEach((k, v) -> inputs.property(k, v))

  filesMatching("META-INF/mods.toml") {
    expand properties
  }
}

loom {
  forge {
    mixinConfig("tramways-common.mixins.json", "tramways-forge.mixins.json")
  }
}

shadowJar {
  exclude "fabric.mod.json"
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowCommon]
  archiveClassifier = "dev-shadow"

  relocate("javazoom.jl", "purplecreate.tramways.javazoom.jl")
}

remapJar {
  injectAccessWidener = true
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  archiveClassifier = null
}

jar {
  archiveClassifier = "dev"
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishMods {
  type = STABLE
  file = tasks.remapJar.archiveFile
  version.set(mod_version)
  changelog = rootProject.file("CHANGELOG.md").text

  curseforge {
    displayName = "${mod_version} Forge"
    projectId = curseforge_id
    accessToken = System.getenv("CURSEFORGE_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("forge")

    requires("create")
    optional("create-steam-n-rails")
    optional("create-railways-navigator")
  }

  modrinth {
    displayName = "Create: Tramways ${mod_version} Forge"
    projectId = modrinth_id
    accessToken = System.getenv("MODRINTH_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("forge")

    requires("create")
    optional("create-steam-n-rails")
    optional("create-railways-navigator")
  }
}
