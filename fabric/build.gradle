plugins {
  id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
  platformSetupLoomIde()
  fabric()
}

loom {
  accessWidenerPath = project(":common").loom.accessWidenerPath

  runs {
    data {
      client()

      name = "Minecraft Data"
      vmArg("-Dfabric-api.datagen")
      vmArg("-Dfabric-api.datagen.modid=${mod_id}")
      vmArg("-Dfabric-api.datagen.output-dir=${project(":common").file("src/generated/resources")}")
      vmArg("-Dporting_lib.datagen.existing_resources=${project(":common").file("src/main/resources")}")

      environmentVariable("DATAGEN", "TRUE")
    }
  }
}

configurations {
  common
  shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
  compileClasspath.extendsFrom common
  runtimeClasspath.extendsFrom common
  developmentFabric.extendsFrom common
}

configurations.configureEach {
  resolutionStrategy {
    force("net.fabricmc:fabric-loader:${fabric_loader_version}")
  }
}

dependencies {
  modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")
  common(project(path: ":common", configuration: "namedElements")) { transitive = false }
  shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive = false }

  // dependencies
  modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

  implementation(shadowCommon("javazoom:jlayer:${jlayer_version}"))

  // Create - dependencies are added transitively
  modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")

  // Development QOL
  modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
  modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

  // Compat
  //modCompileOnly("com.railwayteam.railways:Steam_Rails-fabric-${minecraft_version}:${railways_fabric_version}") { transitive = false }
  //modLocalRuntime("com.railwayteam.railways:Steam_Rails-fabric-${minecraft_version}:${railways_fabric_version}") { transitive = false }

  switch (fabric_recipe_viewer.toLowerCase(Locale.ROOT)) {
    case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
    case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
    case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
    case "disabled": break
    default: println("Unknown recipe viewer specified: ${fabric_recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
  }
}

processResources {
  // set up properties for filling into metadata
  Map<String, String> properties = Map.of(
    "mod_id", mod_id,
    "version", mod_version,
    "fabric_loader_version", fabric_loader_version,
    "fabric_api_version", fabric_api_version,
    "minecraft_version", minecraft_version,
    "create_version", create_fabric_version,
    //"railways_version", railways_fabric_version.split("\\+")[0]
  )
  properties.forEach((k, v) -> inputs.property(k, v))

  filesMatching("fabric.mod.json") {
    expand properties
  }
}

shadowJar {
  exclude "architectury.common.json"

  configurations = [project.configurations.shadowCommon]
  archiveClassifier = "dev-shadow"

  relocate("javazoom.jl", "purplecreate.tramways.javazoom.jl")
}

remapJar {
  injectAccessWidener = true
  input.set shadowJar.archiveFile
  dependsOn shadowJar
  archiveClassifier = null
}

jar {
  archiveClassifier = "dev"
}

sourcesJar {
  def commonSources = project(":common").sourcesJar
  dependsOn commonSources
  from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
  withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
    skip()
  }
}

publishMods {
  type = STABLE
  file = tasks.remapJar.archiveFile
  version.set(mod_version)
  changelog = rootProject.file("CHANGELOG.md").text

  curseforge {
    displayName = "${mod_version} Fabric"
    projectId = curseforge_id
    accessToken = System.getenv("CURSEFORGE_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("fabric")

    requires("create-fabric")
    optional("create-steam-n-rails")
    optional("create-railways-navigator")
  }

  modrinth {
    displayName = "Create: Tramways ${mod_version} Fabric"
    projectId = modrinth_id
    accessToken = System.getenv("MODRINTH_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("fabric")

    requires("create-fabric")
    optional("create-steam-n-rails")
    optional("create-railways-navigator")
  }
}
