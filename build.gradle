plugins {
  id "architectury-plugin" version "3.4-SNAPSHOT"
  id "dev.architectury.loom" version "1.6-SNAPSHOT" apply false
  id "io.github.p03w.machete" version "1.+" // automatic jar compressing on build
  id "me.modmuss50.mod-publish-plugin" version "0.7.4"
}

architectury {
  minecraft = rootProject.minecraft_version
}

subprojects {
  apply plugin: "dev.architectury.loom"

  loom {
    silentMojangMappingsLicense()
  }

  repositories {
    mavenCentral()
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven { url = "https://maven.blamejared.com/" } // JEI
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { // Flywheel
      url = "https://maven.tterrag.com/"
      content {
        // need to be specific here due to version overlaps
        includeGroup("com.jozufozu.flywheel")
      }
    }
  }

  dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings(loom.layered {
      it.officialMojangMappings()
      it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    })
  }
}

allprojects {
  apply plugin: "java"
  apply plugin: "architectury-plugin"
  apply plugin: "maven-publish"

  archivesBaseName = rootProject.mod_id
  group = rootProject.mod_group_id

  String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
  version = "${mod_version}-mc${minecraft_version}-${project.name}" + (buildNumber != null ? "-${buildNumber}" : "")

  repositories {}

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  java {
    withSourcesJar()
  }

  machete {
    // disable machete locally for faster builds
    enabled = buildNumber != null
  }
}

publishMods {
  type = STABLE
  version.set(mod_version)
  changelog = rootProject.file("CHANGELOG.md").text

  github {
    file = project(":forge").remapJar.archiveFile.get()
    additionalFiles.from(project(":fabric").remapJar.archiveFile)
    displayName = "Release ${mod_version}"
    repository = github_repo
    commitish = github_branch
    accessToken = System.getenv("GITHUB_TOKEN")
  }

  curseforge("curseforgeForge") {
    file = project(":forge").remapJar.archiveFile.get()
    displayName = "${mod_version} Forge"
    projectId = curseforge_id
    accessToken = System.getenv("CURSEFORGE_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("forge")

    requires("create")
    optional("create-steam-n-rails")
  }

  modrinth("modrinthForge") {
    file = project(":forge").remapJar.archiveFile.get()
    displayName = "Create: Tramways ${mod_version} Forge"
    projectId = modrinth_id
    accessToken = System.getenv("MODRINTH_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("forge")

    requires("create")
    optional("create-steam-n-rails")
  }

  curseforge("curseforgeFabric") {
    file = project(":fabric").remapJar.archiveFile
    displayName = "${mod_version} Fabric"
    projectId = curseforge_id
    accessToken = System.getenv("CURSEFORGE_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("fabric")

    requires("create-fabric")
    optional("create-steam-n-rails")
  }

  modrinth("modrinthFabric") {
    file = project(":fabric").remapJar.archiveFile
    displayName = "Create: Tramways ${mod_version} Fabric"
    projectId = modrinth_id
    accessToken = System.getenv("MODRINTH_TOKEN")
    minecraftVersions.add(minecraft_version)
    modLoaders.add("fabric")

    requires("create-fabric")
    optional("create-steam-n-rails")
  }
}
